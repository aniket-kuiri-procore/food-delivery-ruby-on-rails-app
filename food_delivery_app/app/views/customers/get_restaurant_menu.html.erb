<!DOCTYPE html>
<html>
<head>
  <title>Restaurant Details</title>
  <style>
    body {
      font-family: sans-serif;
      background-color: #f4f4f4;
      display: flex;
      flex-direction: column;
      align-items: center;
      min-height: 100vh;
      margin: 0;
      padding-top: 20px;
    }

    .details-container {
      background-color: #fff;
      padding: 30px;
      border-radius: 8px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
      width: 80%;
      max-width: 800px;
    }

    h1, h2 {
      color: #333;
      text-align: center;
      margin-bottom: 20px;
    }

    p {
      color: #555;
      line-height: 1.6;
      margin-bottom: 10px;
      text-align: center;
    }

    strong {
      font-weight: bold;
      color: #333;
    }

    /* Menu Table Styles */
    .menu-table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 20px;
      margin-bottom: 20px;
    }

    .menu-table th, .menu-table td {
      padding: 10px;
      border-bottom: 1px solid #eee;
      text-align: left;
    }

    .menu-table th {
      background-color: #f8f8f8;
      font-weight: bold;
    }

    .menu-table tbody tr:last-child td {
      border-bottom: none;
    }

    .menu-table input[type="number"] {
      width: 60px;
      padding: 8px;
      border: 1px solid #ddd;
      border-radius: 4px;
      text-align: center;
    }

    .menu-table button {
      background-color: #007bff;
      color: white;
      padding: 8px 12px;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-size: 14px;
      transition: background-color 0.3s ease;
    }

    .menu-table button:hover {
      background-color: #0056b3;
    }

    /* Add New Food Item Styles */
    .add-food-item-container {
      margin-top: 30px;
      text-align: center;
    }

    .add-food-item-container div {
      display: flex;
      gap: 10px;
      align-items: center;
      justify-content: center;
      margin-bottom: 15px;
    }

    .add-food-item-container input[type="text"],
    .add-food-item-container input[type="number"] {
      padding: 10px;
      border: 1px solid #ddd;
      border-radius: 4px;
    }

    .add-food-item-container button {
      background-color: #5cb85c;
      color: white;
      padding: 10px 15px;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-size: 16px;
      transition: background-color 0.3s ease;
    }

    .add-food-item-container button:hover {
      background-color: #4cae4c;
    }

    /* Order Summary Styles */
    #order-summary {
      margin-top: 40px;
      text-align: center;
      border-top: 1px solid #eee;
      padding-top: 20px;
    }

    #order-items {
      list-style: none;
      padding: 0;
      margin-bottom: 15px;
      text-align: left;
    }

    #order-items li {
      padding: 8px 0;
      border-bottom: 1px dotted #f0f0f0;
    }

    #order-items li:last-child {
      border-bottom: none;
    }

    #order-total {
      font-weight: bold;
      font-size: 18px;
    }

    #order-summary button {
      background-color: #d9534f;
      color: white;
      padding: 12px 25px;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-size: 18px;
      transition: background-color 0.3s ease;
      margin-top: 20px;
    }

    #order-summary button:hover {
      background-color: #c9302c;
    }
  </style>
</head>
<body>
  <div class="details-container">
    <h1>Restaurant Details</h1>

    <p><strong>Restaurant ID:</strong> <%= @restaurant_id %></p>
    <p><strong>Name:</strong> <%= @name %></p>
    <p><strong>Address:</strong> <%= @address %></p>

    <p>This page will eventually display restaurant-specific details.</p>

    <h2>Menu</h2>
    <table class="menu-table">
      <thead>
        <tr>
          <th>Food Name</th>
          <th>Price</th>
          <th>Description</th>
          <th>Quantity</th>
          <th>Action</th>
        </tr>
      </thead>
      <tbody>
        <% @menu.each do |key, item| %>
          <tr>
            <td><%= item['name'] %></td>
            <td><%= item['price'] %></td>
            <td><%= item['description'] %></td>
            <td><input type="number" id="qty_<%= item['name'].gsub(/\s+/, '_').gsub(/[^a-zA-Z0-9_]/, '') %>" value="1" min="1"></td>
            <td><button onclick="addItemToOrder('<%= @customer_id %>', '<%= @restaurant_id %>', '<%= item['name'].gsub(/\s+/, '_').gsub(/[^a-zA-Z0-9_]/, '') %>', '<%= item['price'] %>')">Add</button></td>
          </tr>
        <% end %>
      </tbody>
    </table>


    <div id="order-summary">
      <h2>Order Summary</h2>
      <ul id="order-items"></ul>
      <p>Total: <span id="order-total">0.00</span></p>
      <button onclick="placeOrder('<%= @customer_id %>', '<%= @restaurant_id %>')">Place Order</button>
    </div>
  </div>

  <script>
    let orderItems = [];
    let orderTotal = 0;

    function addItemToOrder(customerId, restaurantId, itemName, itemPrice) {
      const quantityInput = document.getElementById(`qty_${itemName.replace(/\s+/g, '_').replace(/[^a-zA-Z0-9_]/g, '')}`);
      const quantity = parseInt(quantityInput.value);

      if (isNaN(quantity) || quantity <= 0) {
        alert('Please enter a valid quantity.');
        return;
      }

      const existingItem = orderItems.find(item => item.itemName === itemName);
      if (existingItem) {
        existingItem.quantity += quantity;
      } else {
        orderItems.push({ itemName, itemPrice, quantity });
      }

      orderTotal += quantity * parseFloat(itemPrice);

      updateOrderSummary();
    }

    function updateOrderSummary() {
      const orderItemsList = document.getElementById('order-items');
      orderItemsList.innerHTML = ''; // Clear previous summary
      orderItems.forEach(item => {
        const li = document.createElement('li');
        li.textContent = `${item.itemName} x ${item.quantity} - $${(item.itemPrice * item.quantity).toFixed(2)}`;
        orderItemsList.appendChild(li);
      });

      document.getElementById('order-total').textContent = orderTotal.toFixed(2);
    }

    function placeOrder(customerId, restaurantId) {
      if (orderItems.length === 0) {
        alert('Your order is empty!');
        return;
      }

      const url = `/customers/${customerId}/orders`;
      const orderData = {
        restaurant_id: restaurantId,
        items: orderItems.map(item => ({
          name: item.itemName,
          quantity: item.quantity
        })),
        total: orderTotal.toFixed(2) // Send total as a fixed-point number
      };

      fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': getCSRFToken(), // Include CSRF token
        },
        body: JSON.stringify(orderData),
      })
      .then(response => {
        if (response.ok) {
          return response.json(); // Parse the JSON response
        } else {
          return response.json().then(errorData => { // Parse JSON error message
            throw new Error('Failed to place order: ' + (errorData.message || 'Unknown error'));
          });
        }
      })
      .then(data => {
        alert('Order placed successfully! Order ID: ' + data.order_id);
        window.location.href = `/customers/${customerId}/orders/${data.order_id}`; // Redirect to order confirmation page //:customer_id/orders/:order_id
      })
      .catch(error => {
        alert('Error: ' + error.message);
      });
    }

    function getCSRFToken() {
      const metaTag = document.querySelector('meta[name="csrf-token"]');
      if (metaTag) {
        return metaTag.content;
      }
      return null;
    }
  </script>
</body>
</html>